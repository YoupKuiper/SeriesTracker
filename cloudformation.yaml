AWSTemplateFormatVersion: '2010-09-09'
Description: Deploying TVShowsTracker infrastructure
Parameters:
  ArtifactBucketName:
    Type: String
    Description: Name of the S3 bucket where artifacts are stored
  CodeZipFileName:
    Type: String
    Description: Name of the zipfile containing the Lambda code
  TheMovieDbToken:
    Type: String
    Description: Token for calling the movie db api
  VerifiedEmailAddress:
    Type: String
    Description: Email address used to send emails
  UserTableName:
    Type: String
    Description: Name of DynamoDB table that holds user data
  JWTSecret:
    Type: String
    Description: Secret used for signing JWT token
  APIGatewayName:
    Type: String
    Description: Name of the API
  ApiGatewayStageName:
    Type: String
    Description: stage of api gateway deployment
    Default: prod
  ApiGatewayHTTPMethod:
    Type: String
    Default: POST

Resources:

  ## IAM ROLES
  LambdaIAMRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName:
        Fn::Sub: lambda-role
      AssumeRolePolicyDocument:
        Statement:
          - Action:
            - sts:AssumeRole
            Effect: Allow
            Principal:
              Service:
              - lambda.amazonaws.com
        Version: 2012-10-17
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/AWSLambdaExecute
        - arn:aws:iam::aws:policy/AmazonSESFullAccess
        - arn:aws:iam::aws:policy/AmazonDynamoDBFullAccess
      Path: /

  ## LAMBDA FUNCTIONS
  EmailNotificationsLambda:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName:
        Fn::Sub: EmailNotificationsLambda
      Description: Lambda function that notifies users of airing episodes for tracked tv shows
      Runtime: nodejs16.x
      Code:
        S3Bucket: !Ref ArtifactBucketName
        S3Key: !Ref CodeZipFileName
      Environment:
        Variables:
          THE_MOVIE_DB_TOKEN: !Ref TheMovieDbToken
          VERIFIED_EMAIL_ADDRESS: !Ref VerifiedEmailAddress
          USER_TABLE_NAME: !Ref UserTableName
      Handler: EmailNotificationsLambda.handler
      MemorySize: 128
      Timeout: 10
      Role:
        Fn::GetAtt:
          - LambdaIAMRole
          - Arn

  AccountCreationLambda:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName:
        Fn::Sub: AccountCreationLambda
      Description: Lambda function for creating user accounts and storing them in DynamoDB
      Runtime: nodejs16.x
      Code:
        S3Bucket: !Ref ArtifactBucketName
        S3Key: !Ref CodeZipFileName
      Environment:
        Variables:
          THE_MOVIE_DB_TOKEN: !Ref TheMovieDbToken
          VERIFIED_EMAIL_ADDRESS: !Ref VerifiedEmailAddress
          USER_TABLE_NAME: !Ref UserTableName
          JWT_SECRET: !Ref JWTSecret
      Handler: AccountCreationLambda.handler
      MemorySize: 128
      Timeout: 10
      Role:
        Fn::GetAtt:
          - LambdaIAMRole
          - Arn

  LoginLambda:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName:
        Fn::Sub: LoginLambda
      Description: Lambda function used for logging in users
      Runtime: nodejs16.x
      Code:
        S3Bucket: !Ref ArtifactBucketName
        S3Key: !Ref CodeZipFileName
      Environment:
        Variables:
          THE_MOVIE_DB_TOKEN: !Ref TheMovieDbToken
          VERIFIED_EMAIL_ADDRESS: !Ref VerifiedEmailAddress
          USER_TABLE_NAME: !Ref UserTableName
          JWT_SECRET: !Ref JWTSecret
      Handler: LoginLambda.handler
      MemorySize: 128
      Timeout: 10
      Role:
        Fn::GetAtt:
          - LambdaIAMRole
          - Arn

  UpdateUserRecordLambda:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName:
        Fn::Sub: UpdateUserRecordLambda
      Description: Lambda function used for updating user settings
      Runtime: nodejs16.x
      Code:
        S3Bucket: !Ref ArtifactBucketName
        S3Key: !Ref CodeZipFileName
      Environment:
        Variables:
          THE_MOVIE_DB_TOKEN: !Ref TheMovieDbToken
          VERIFIED_EMAIL_ADDRESS: !Ref VerifiedEmailAddress
          USER_TABLE_NAME: !Ref UserTableName
          JWT_SECRET: !Ref JWTSecret
      Handler: UpdateUserRecordLambda.handler
      MemorySize: 128
      Timeout: 10
      Role:
        Fn::GetAtt:
          - LambdaIAMRole
          - Arn

  ## API GATEWAY
  ApiGateway:
    Type: AWS::ApiGateway::RestApi
    Properties:
      Description: API Gateway for TV Show Tracker
      EndpointConfiguration:
        Types:
          - REGIONAL
      Name: !Ref APIGatewayName

  ApiGatewayLoginMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      AuthorizationType: NONE
      HttpMethod: !Ref ApiGatewayHTTPMethod
      Integration:
        IntegrationHttpMethod: POST
        Type: AWS_PROXY
      ResourceId: !Ref ApiGatewayLoginResource
      RestApiId: !Ref ApiGateway
      Uri: !Sub arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${LoginLambda.Arn}/invocations


  ApiGatewayCreateAccountMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      AuthorizationType: NONE
      HttpMethod: !Ref ApiGatewayHTTPMethod
      Integration:
        IntegrationHttpMethod: POST
        Type: AWS_PROXY
      ResourceId: !Ref ApiGatewayCreateAccountResource
      RestApiId: !Ref ApiGateway
      Uri: !Sub arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${AccountCreationLambda.Arn}/invocations

  ApiGatewayUpdateUserMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      AuthorizationType: NONE
      HttpMethod: !Ref ApiGatewayHTTPMethod
      Integration:
        IntegrationHttpMethod: POST
        Type: AWS_PROXY
      ResourceId: !Ref ApiGatewayUpdateUserResource
      RestApiId: !Ref ApiGateway
      Uri: !Sub arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${UpdateUserRecordLambda.Arn}/invocations

  ApiGatewayLoginResource:
    Type: AWS::ApiGateway::Resource
    Properties: 
      ParentId: !GetAtt ApiGateway.RootResourceId
      PathPart: Login
      RestApiId: !Ref ApiGateway

  ApiGatewayCreateAccountResource:
    Type: AWS::ApiGateway::Resource
    Properties: 
      ParentId: !GetAtt ApiGateway.RootResourceId
      PathPart: CreateAccount
      RestApiId: !Ref ApiGateway

  ApiGatewayUpdateUserResource:
    Type: AWS::ApiGateway::Resource
    Properties: 
      ParentId: !GetAtt ApiGateway.RootResourceId
      PathPart: UpdateUser
      RestApiId: !Ref ApiGateway

  ApiGatewayDeployment:
    Type: AWS::ApiGateway::Deployment
    DependsOn:
      - ApiGatewayLoginMethod
      - ApiGatewayCreateAccountMethod
      - ApiGatewayUpdateUserMethod
    Properties:
      RestApiId: !Ref ApiGateway
      StageName: !Ref ApiGatewayStageName

  ## DYNAMO DB TABLES
  UsersTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: !Ref UserTableName
      ProvisionedThroughput: 
        ReadCapacityUnits: "5"
        WriteCapacityUnits: "5"
      AttributeDefinitions:
      - AttributeName: "emailAddress"
        AttributeType: "S"
      KeySchema:
      - AttributeName: "emailAddress"
        KeyType: "HASH"

  ## MISCELLANEOUS
  ScheduledRule: 
    Type: AWS::Events::Rule
    Properties: 
      Description: "ScheduledRule"
      ScheduleExpression: "rate(1 day)"
      State: "ENABLED"
      Targets: 
        - 
          Arn: 
            Fn::GetAtt: 
              - "EmailNotificationsLambda"
              - "Arn"
          Id: "TargetFunctionV1"
  
  PermissionForEventsToInvokeLambda: 
    Type: AWS::Lambda::Permission
    Properties: 
      FunctionName: 
        Ref: "EmailNotificationsLambda"
      Action: "lambda:InvokeFunction"
      Principal: "events.amazonaws.com"
      SourceArn: 
        Fn::GetAtt: 
          - "ScheduledRule"
          - "Arn"

  LambdaApiGatewayInvokeLogin:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !GetAtt LoginLambda.Arn
      Principal: apigateway.amazonaws.com          
      SourceArn: !Sub arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${ApiGateway}/${ApiGatewayStageName}/${ApiGatewayHTTPMethod}/Login

  LambdaApiGatewayInvokeCreateAccount:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !GetAtt AccountCreationLambda.Arn
      Principal: apigateway.amazonaws.com          
      SourceArn: !Sub arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${ApiGateway}/${ApiGatewayStageName}/${ApiGatewayHTTPMethod}/CreateAccount

  LambdaApiGatewayInvokeUpdateUser:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !GetAtt UpdateUserRecordLambda.Arn
      Principal: apigateway.amazonaws.com          
      SourceArn: !Sub arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${ApiGateway}/${ApiGatewayStageName}/${ApiGatewayHTTPMethod}/UpdateUser
